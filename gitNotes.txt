Directory tree:
config			contains project-specific configuration options
info/			keeps a global exclude file for ignored patterns that you don’t want to track in a .gitignore file
hooks/			contains client- or server-side hook scripts

objects/		stores all the content for your database (object database)
refs/			stores pointers into commit objects in objects/ (branches, tags, remotes ...)
HEAD			points to currently checked out branch
index			where Git stores staging area information


Test project:

git init								# init clean .git directory 
echo "test content" | git hash-object -w --stdin			# store some data in an object file
git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4		# display stored content
echo "version 1" > test.txt						# create data file
git hash-object -w test.txt						# store file content in an object file
echo "version 2" > test.txt						# change file content
git hash-object -w test.txt						# store new file content in an object file
rm test.txt								# remove file
git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a > test.txt	# restore file
cat test.txt								# check content of file
git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a		# display object type 'blob'

# Only data/content is stored in blob object, not file name.

git update-index --add --cacheinfo 100644 83baae61804e65cc73a7201a7252750c76066a30 test.txt	# add the 1st version of the test.txt file to a new staging area
git write-tree											# write the staging area out to a tree object
git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579					# display tree object
git cat file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579					# display object type 'tree'
echo "new file" > new.txt									# create new file
git update-index --add --cacheinfo 100644 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt	# add the 2nd version of the test.txt file to a new staging area
git update-index --add new.txt									# add new file to staging area
git write-tree											# write the staging area out to a tree object
git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341					# display tree object
git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579				# read 1st tree object into staging area
git write-tree											# write the staging area out to a tree object
git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614					# display tree object

# blob and tree objects don’t have any information about who saved the "snapshots", when they were saved, or why they were saved.

echo 'First commit' | git commit-tree d8329f				# create commit object of 1st tree object (0645a94921492dcb21f2fe7c621f2b456a1818ac)
git cat-file -p 0645a94921492dcb21f2fe7c621f2b456a1818ac		# display commit object
echo 'Second commit' | git commit-tree 0155eb -p 0645a94		# create commit object of 2nd tree object, 1st commit object as parent (a466f97be75448407c3f2dd46867665bfe6a5081)
echo 'Third commit' | git commit-tree 3c4e9c -p a466f97			# create commit object of 3rd tree object, 2nd commit object as parent (d4dce94d872e260bc7290dd6add4f17e1af9dede)
git log --stat d4dce9							# display commit log history from 3rd commit

# This is essentially what Git does when you run the git add and git commitcommands — it stores
# blobs for the files that have changed, updates the index, writes out trees, and writes commit
# objects that reference the top-level trees and the commits that came immediately before them.


echo d4dce94d872e260bc7290dd6add4f17e1af9dede > .git/refs/heads/master		# manually store reference 'master' for latest commit
git update-ref refs/heads/master d4dce94d872e260bc7290dd6add4f17e1af9dede	# git safe command to do the same
git log --pretty=oneline master							# display commit log history from master reference
git update-ref refs/heads/test a466f97						# create brach 'test' at 2nd commit
git log --oneline test								# display commit log history from 'test' branch

# A branch in Git is simply pointer/reference to the head commit of a line of work.

# When you run commands like git branch <branch>, Git basically runs that update-ref command to add
# the SHA-1 of the last commit of the branch you’re on into whatever new reference you want to create.

# The HEAD file is a symbolic reference to the branch you’re currently on. By symbolic reference,
# we mean that unlike a normal reference, it contains a pointer to another reference.

cat .git/HEAD					# display HEAD file content -> "ref: refs/heads/master"
git checkout test				# switch to 'test' branch
cat .git/HEAD					# display HEAD file content -> "ref: refs/heads/test"
git symbolic-ref HEAD				# git command to read value of HEAD
git symbolic-ref HEAD refs/heads/master		# low level command to switch branch
cat .git/HEAD					# display HEAD file content -> "ref: refs/heads/master"

# When you run git commit, it creates the commit object, specifying the parent of that commit object
# to be whatever SHA-1 value the reference in HEAD points to.

# A tag object is similar to a commit object, except it generally points to a commit rather than a tree.
# A tag object is like a branch reference, but it never moves — it always points to the same commit but
# gives it a friendlier name.

git update-ref refs/tags/v1.0 a466f97be75448407c3f2dd46867665bfe6a5081		# make lightweight tag of 2nd commit - lightweight tag is just a reference to a commit
cat .git/refs/tags/v1.0								# display content (direct reference to commit) -> "a466f97be75448407c3f2dd46867665bfe6a5081"
git tag -a v1.1 d4dce94d872e260bc7290dd6add4f17e1af9dede -m 'Test tag'		# make annotated tag of 3rd commit - annotated tag is a reference to a tag object
cat .git/refs/tags/v1.1								# display content (referrence to new tag object) -> "5ce7e8437fd432f222d5386352187bf3f2870b65"
git cat-file -p 5ce7e8437fd432f222d5386352187bf3f2870b65			# display tag object data


git remote add origin https://github.com/HybridChild/git_TestPrj.git		# add a remote reference called origin
git push origin master								# push master branch to remote reference
cat .git/refs/remotes/origin/master						# display content of remote reference 'origin'
